/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * ÌåúÌåú API
 * ÌåúÌåú API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GreenhouseSectionSensorMeasurement,
  GreenhouseSectionSensorMeasurementForm
} from '../../model'
import { farmfarmAxiosInstance } from '../../../axios/axios_instance';
import type { ErrorType, BodyType } from '../../../axios/axios_instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const findAllGreenhouseSectionSensorMeasurement = (
    greenhouseId: string,
    greenhouseSectionId: string,
    greenhouseSectionSensorId: string,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<GreenhouseSectionSensorMeasurement[]>(
      {url: `/greenhouses/${greenhouseId}/sections/${greenhouseSectionId}/sensors/${greenhouseSectionSensorId}/measurements`, method: 'GET', signal
    },
      options);
    }
  

export const getFindAllGreenhouseSectionSensorMeasurementQueryKey = (greenhouseId: string,
    greenhouseSectionId: string,
    greenhouseSectionSensorId: string,) => {
    return [`/greenhouses/${greenhouseId}/sections/${greenhouseSectionId}/sensors/${greenhouseSectionSensorId}/measurements`] as const;
    }

    
export const getFindAllGreenhouseSectionSensorMeasurementQueryOptions = <TData = Awaited<ReturnType<typeof findAllGreenhouseSectionSensorMeasurement>>, TError = ErrorType<unknown>>(greenhouseId: string,
    greenhouseSectionId: string,
    greenhouseSectionSensorId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllGreenhouseSectionSensorMeasurement>>, TError, TData>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllGreenhouseSectionSensorMeasurementQueryKey(greenhouseId,greenhouseSectionId,greenhouseSectionSensorId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllGreenhouseSectionSensorMeasurement>>> = ({ signal }) => findAllGreenhouseSectionSensorMeasurement(greenhouseId,greenhouseSectionId,greenhouseSectionSensorId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(greenhouseId && greenhouseSectionId && greenhouseSectionSensorId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllGreenhouseSectionSensorMeasurement>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllGreenhouseSectionSensorMeasurementQueryResult = NonNullable<Awaited<ReturnType<typeof findAllGreenhouseSectionSensorMeasurement>>>
export type FindAllGreenhouseSectionSensorMeasurementQueryError = ErrorType<unknown>

export const useFindAllGreenhouseSectionSensorMeasurement = <TData = Awaited<ReturnType<typeof findAllGreenhouseSectionSensorMeasurement>>, TError = ErrorType<unknown>>(
 greenhouseId: string,
    greenhouseSectionId: string,
    greenhouseSectionSensorId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllGreenhouseSectionSensorMeasurement>>, TError, TData>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getFindAllGreenhouseSectionSensorMeasurementQueryOptions(greenhouseId,greenhouseSectionId,greenhouseSectionSensorId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createGreenhouseSectionSensorMeasurement = (
    greenhouseId: string,
    greenhouseSectionId: string,
    greenhouseSectionSensorId: string,
    greenhouseSectionSensorMeasurementForm: BodyType<GreenhouseSectionSensorMeasurementForm>,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,) => {
      
      
      return farmfarmAxiosInstance<string>(
      {url: `/greenhouses/${greenhouseId}/sections/${greenhouseSectionId}/sensors/${greenhouseSectionSensorId}/measurements`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: greenhouseSectionSensorMeasurementForm
    },
      options);
    }
  


export const getCreateGreenhouseSectionSensorMeasurementMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGreenhouseSectionSensorMeasurement>>, TError,{greenhouseId: string;greenhouseSectionId: string;greenhouseSectionSensorId: string;data: BodyType<GreenhouseSectionSensorMeasurementForm>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createGreenhouseSectionSensorMeasurement>>, TError,{greenhouseId: string;greenhouseSectionId: string;greenhouseSectionSensorId: string;data: BodyType<GreenhouseSectionSensorMeasurementForm>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGreenhouseSectionSensorMeasurement>>, {greenhouseId: string;greenhouseSectionId: string;greenhouseSectionSensorId: string;data: BodyType<GreenhouseSectionSensorMeasurementForm>}> = (props) => {
          const {greenhouseId,greenhouseSectionId,greenhouseSectionSensorId,data} = props ?? {};

          return  createGreenhouseSectionSensorMeasurement(greenhouseId,greenhouseSectionId,greenhouseSectionSensorId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateGreenhouseSectionSensorMeasurementMutationResult = NonNullable<Awaited<ReturnType<typeof createGreenhouseSectionSensorMeasurement>>>
    export type CreateGreenhouseSectionSensorMeasurementMutationBody = BodyType<GreenhouseSectionSensorMeasurementForm>
    export type CreateGreenhouseSectionSensorMeasurementMutationError = ErrorType<unknown>

    export const useCreateGreenhouseSectionSensorMeasurement = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGreenhouseSectionSensorMeasurement>>, TError,{greenhouseId: string;greenhouseSectionId: string;greenhouseSectionSensorId: string;data: BodyType<GreenhouseSectionSensorMeasurementForm>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createGreenhouseSectionSensorMeasurement>>,
        TError,
        {greenhouseId: string;greenhouseSectionId: string;greenhouseSectionSensorId: string;data: BodyType<GreenhouseSectionSensorMeasurementForm>},
        TContext
      > => {

      const mutationOptions = getCreateGreenhouseSectionSensorMeasurementMutationOptions(options);

      return useMutation(mutationOptions);
    }
    