/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * ÌåúÌåú API
 * ÌåúÌåú API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Organization,
  OrganizationCreateForm
} from '../../model'
import { farmfarmAxiosInstance } from '../../../axios/axios_instance';
import type { ErrorType, BodyType } from '../../../axios/axios_instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const findAllOrganization = (
    
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<Organization[]>(
      {url: `/organizations`, method: 'GET', signal
    },
      options);
    }
  

export const getFindAllOrganizationQueryKey = () => {
    return [`/organizations`] as const;
    }

    
export const getFindAllOrganizationQueryOptions = <TData = Awaited<ReturnType<typeof findAllOrganization>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllOrganization>>, TError, TData>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllOrganizationQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllOrganization>>> = ({ signal }) => findAllOrganization(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllOrganization>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof findAllOrganization>>>
export type FindAllOrganizationQueryError = ErrorType<unknown>

export const useFindAllOrganization = <TData = Awaited<ReturnType<typeof findAllOrganization>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllOrganization>>, TError, TData>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getFindAllOrganizationQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createOrganization = (
    organizationCreateForm: BodyType<OrganizationCreateForm>,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,) => {
      
      
      return farmfarmAxiosInstance<string>(
      {url: `/organizations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organizationCreateForm
    },
      options);
    }
  


export const getCreateOrganizationMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: BodyType<OrganizationCreateForm>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: BodyType<OrganizationCreateForm>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrganization>>, {data: BodyType<OrganizationCreateForm>}> = (props) => {
          const {data} = props ?? {};

          return  createOrganization(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof createOrganization>>>
    export type CreateOrganizationMutationBody = BodyType<OrganizationCreateForm>
    export type CreateOrganizationMutationError = ErrorType<unknown>

    export const useCreateOrganization = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: BodyType<OrganizationCreateForm>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createOrganization>>,
        TError,
        {data: BodyType<OrganizationCreateForm>},
        TContext
      > => {

      const mutationOptions = getCreateOrganizationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    