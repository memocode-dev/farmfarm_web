/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * ÌåúÌåú API
 * ÌåúÌåú API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GreenhouseSection,
  GreenhouseSectionCreateForm
} from '../../model'
import { farmfarmAxiosInstance } from '../../../axios/axios_instance';
import type { ErrorType, BodyType } from '../../../axios/axios_instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const findAllGreenhouseSections = (
    greenhouseId: string,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<GreenhouseSection[]>(
      {url: `/greenhouses/${greenhouseId}/sections`, method: 'GET', signal
    },
      options);
    }
  

export const getFindAllGreenhouseSectionsQueryKey = (greenhouseId: string,) => {
    return [`/greenhouses/${greenhouseId}/sections`] as const;
    }

    
export const getFindAllGreenhouseSectionsQueryOptions = <TData = Awaited<ReturnType<typeof findAllGreenhouseSections>>, TError = ErrorType<unknown>>(greenhouseId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllGreenhouseSections>>, TError, TData>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllGreenhouseSectionsQueryKey(greenhouseId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllGreenhouseSections>>> = ({ signal }) => findAllGreenhouseSections(greenhouseId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(greenhouseId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllGreenhouseSections>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllGreenhouseSectionsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllGreenhouseSections>>>
export type FindAllGreenhouseSectionsQueryError = ErrorType<unknown>

export const useFindAllGreenhouseSections = <TData = Awaited<ReturnType<typeof findAllGreenhouseSections>>, TError = ErrorType<unknown>>(
 greenhouseId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllGreenhouseSections>>, TError, TData>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getFindAllGreenhouseSectionsQueryOptions(greenhouseId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createGreenhouseSection = (
    greenhouseId: string,
    greenhouseSectionCreateForm: BodyType<GreenhouseSectionCreateForm>,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,) => {
      
      
      return farmfarmAxiosInstance<string>(
      {url: `/greenhouses/${greenhouseId}/sections`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: greenhouseSectionCreateForm
    },
      options);
    }
  


export const getCreateGreenhouseSectionMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGreenhouseSection>>, TError,{greenhouseId: string;data: BodyType<GreenhouseSectionCreateForm>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createGreenhouseSection>>, TError,{greenhouseId: string;data: BodyType<GreenhouseSectionCreateForm>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGreenhouseSection>>, {greenhouseId: string;data: BodyType<GreenhouseSectionCreateForm>}> = (props) => {
          const {greenhouseId,data} = props ?? {};

          return  createGreenhouseSection(greenhouseId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateGreenhouseSectionMutationResult = NonNullable<Awaited<ReturnType<typeof createGreenhouseSection>>>
    export type CreateGreenhouseSectionMutationBody = BodyType<GreenhouseSectionCreateForm>
    export type CreateGreenhouseSectionMutationError = ErrorType<unknown>

    export const useCreateGreenhouseSection = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGreenhouseSection>>, TError,{greenhouseId: string;data: BodyType<GreenhouseSectionCreateForm>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createGreenhouseSection>>,
        TError,
        {greenhouseId: string;data: BodyType<GreenhouseSectionCreateForm>},
        TContext
      > => {

      const mutationOptions = getCreateGreenhouseSectionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    