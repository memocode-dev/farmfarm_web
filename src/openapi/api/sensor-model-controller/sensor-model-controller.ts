/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * ÌåúÌåú API
 * ÌåúÌåú API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  SensorModel,
  SensorModelCreateForm
} from '../../model'
import { farmfarmAxiosInstance } from '../../../axios/axios_instance';
import type { ErrorType, BodyType } from '../../../axios/axios_instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const findAllSensorModel = (
    
 options?: SecondParameter<typeof farmfarmAxiosInstance>,signal?: AbortSignal
) => {
      
      
      return farmfarmAxiosInstance<SensorModel[]>(
      {url: `/sensorModels`, method: 'GET', signal
    },
      options);
    }
  

export const getFindAllSensorModelQueryKey = () => {
    return [`/sensorModels`] as const;
    }

    
export const getFindAllSensorModelQueryOptions = <TData = Awaited<ReturnType<typeof findAllSensorModel>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllSensorModel>>, TError, TData>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllSensorModelQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllSensorModel>>> = ({ signal }) => findAllSensorModel(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllSensorModel>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllSensorModelQueryResult = NonNullable<Awaited<ReturnType<typeof findAllSensorModel>>>
export type FindAllSensorModelQueryError = ErrorType<unknown>

export const useFindAllSensorModel = <TData = Awaited<ReturnType<typeof findAllSensorModel>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllSensorModel>>, TError, TData>, request?: SecondParameter<typeof farmfarmAxiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getFindAllSensorModelQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createSensorModel = (
    sensorModelCreateForm: BodyType<SensorModelCreateForm>,
 options?: SecondParameter<typeof farmfarmAxiosInstance>,) => {
      
      
      return farmfarmAxiosInstance<string>(
      {url: `/sensorModels`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sensorModelCreateForm
    },
      options);
    }
  


export const getCreateSensorModelMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSensorModel>>, TError,{data: BodyType<SensorModelCreateForm>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createSensorModel>>, TError,{data: BodyType<SensorModelCreateForm>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createSensorModel>>, {data: BodyType<SensorModelCreateForm>}> = (props) => {
          const {data} = props ?? {};

          return  createSensorModel(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateSensorModelMutationResult = NonNullable<Awaited<ReturnType<typeof createSensorModel>>>
    export type CreateSensorModelMutationBody = BodyType<SensorModelCreateForm>
    export type CreateSensorModelMutationError = ErrorType<unknown>

    export const useCreateSensorModel = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSensorModel>>, TError,{data: BodyType<SensorModelCreateForm>}, TContext>, request?: SecondParameter<typeof farmfarmAxiosInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createSensorModel>>,
        TError,
        {data: BodyType<SensorModelCreateForm>},
        TContext
      > => {

      const mutationOptions = getCreateSensorModelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    